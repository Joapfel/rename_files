#!/bin/bash

#the script needs two arguments given otherwise it wont run
if [ "$#" == 3 -o "$#" == 4 ]; then
  #ending of the files that should be manipulated
  #FIRST ARGUMENT OF THE SCRIPT
  end="$1"
  #number which modifies the index of all files
  #SECOND ARGUMENT OF THE SCRIPT
  to_be_replaced="$2"

  target_replacement="$3"

  all="$4"

else
  echo "-----------------------------------------------------"
  echo "ATTENTION: "
  echo "filetype and replacement string need to be specified! "
  echo ""
  echo "FIRST ARGUMENT: filetype {txt, jpg, wav, etc..}"
  echo ""
  echo "SECOND ARGUMENT: to be replaced"
  echo ""
  echo "THIRD ARGUMENT: replacement"
  echo ""
  echo "FOURTH ARGUMENT (not obligatory): 'all' if all instances of the SECOND ARGUMENT should be replaced"
  echo "-----------------------------------------------------"
  exit 1
fi

#rename file via regex
for f in *.$end
do
  if [[ $f == *$to_be_replaced* ]]; then
    #echo $to_be_replaced
    #echo $f
    #echo $target_replacement
    
    if [[ $all == "all" ]]; then
      result=${f//$to_be_replaced/$target_replacement}
    else
      result="${f/$to_be_replaced/$target_replacement}"
    fi

    mv $f $result

  fi
done

#manipulate all files of the given type
#for file in *.$end
#do
  #get the filenumber out of messy files
  #EXAMPLE: somename33.txt ---> we want to get the 33
  #we need this even if the original filename is only a number
  #because of the previously changed filename
#  NUMBER=$(echo $file | grep -o -E '[0-9]+')
  #the original number changed by the second arg number 
#  NEW_N=$((NUMBER + i))
  #show how the filename changed
#  echo "${file/tmp/""}" ---\> "$NEW_N".$end

  #double check that files are only renamed if the target name
  #does not exist already
#  if [ ! -f "$NEW_N".$end ]; then
#     mv "$file" "${file/*.$end/$NEW_N.$end}"
#  fi
#done

